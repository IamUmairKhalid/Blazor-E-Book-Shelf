@page "/signup"
@layout BlankLayout
@rendermode InteractiveServer
<PageTitle>User Sign Up</PageTitle>

<div class="container d-flex align-items-center justify-content-center" style="min-height: 100vh;">
    <div class="card shadow-lg p-4" style="width: 100%; max-width: 450px;">
        <div class="card-body">
            <h3 class="text-center mb-4">Create Account</h3>

            <EditForm Model="@signUpModel" OnValidSubmit="@HandleSignUp">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label class="form-label">Full Name</label>
                    <InputText class="form-control" @bind-Value="signUpModel.FullName" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Email</label>
                    <InputText type="email" class="form-control" @bind-Value="signUpModel.Email" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Password</label>
                    <InputText type="password" class="form-control" @bind-Value="signUpModel.Password" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Confirm Password</label>
                    <InputText type="password" class="form-control" @bind-Value="signUpModel.ConfirmPassword" />
                </div>
                @if (!string.IsNullOrWhiteSpace(ErrorMessage))
                {
                    <div class="alert alert-danger text-center" role="alert">@ErrorMessage</div>
                }
                <button type="submit" class="btn btn-success w-100">Sign Up</button>
            </EditForm>

            <div class="mt-3 text-center">
                <span>Already have an account? </span>
                <a href="signin">Sign In</a>
            </div>
        </div>
    </div>
</div>

@code {
    private SignUpModel signUpModel = new();
    private Users User { get; set; } = new();
    public string? ErrorMessage;

    private void HandleSignUp()
    {
        ErrorMessage = null;

        var userexist = Db.Users.FirstOrDefault(u => u.Email == signUpModel.Email);

        if (userexist is not null)
        {
            ErrorMessage = "User with this Email Already Exists";
            return;
        }
        else
        {
            User.UserName = signUpModel.FullName;
            User.Email = signUpModel.Email;
            User.Password = signUpModel.Password;
            User.Subscription = true;

            Db.Users.Add(User);
            Db.SaveChanges();
            NavigationManager.NavigateTo("/signin");
        }
    }

    public class SignUpModel
    {
        [Required(ErrorMessage = "Username is required.")]
        [StringLength(50, MinimumLength = 3, ErrorMessage = "Username must be between 3 and 50 characters.")]
        public string FullName { get; set; } = "";

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Password is required.")]
        [StringLength(100, MinimumLength = 8, ErrorMessage = "Password must be at least 8 characters.")]
        [DataType(DataType.Password)]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[\$@#])[A-Za-z\d\$@#]{8,}$",
        ErrorMessage = "Password must include at least one uppercase letter, one lowercase letter, one digit, and one special character ($, @, or #).")]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Confirm Password is required")]
        [Compare("Password", ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = "";
    }
}
