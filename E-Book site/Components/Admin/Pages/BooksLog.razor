@page "/Admin/BooksLogs"
@using Microsoft.EntityFrameworkCore
@layout AdminLayout
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Logs</PageTitle>

<!-- Table -->

<div class="row  justify-content-center ">

    <div class="col-md-10 justify-content-center">
        <h2>
            Logs Count (@Count)
        </h2>
        <table border="1" class="table mt-3 table-hover ">
            <thead class="custom-header">
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">User Name</th>
                    <th scope="col">Book Name</th>
                    <th scope="col">Status</th>
                    <th scope="col">Last Read</th>
                    <th scope="col">Progress</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Logs)
                {
                    <tr >
                        <td>@item.Id</td>
                        <td>@item.User.UserName</td>
                        <td>
                            <span class="short-text">@(item.Book.Title.Length > 10 ? item.Book.Title.Substring(0, 10) + "..." : item.Book.Title)</span>
                        </td>
                        @* <td>
                            <span class="badge @(item.Role == "Admin" ? "bg-primary" : "bg-secondary")">
                                @(item.Role)
                            </span>
                        </td>
                        <td><span class="badge @(item.Subscription == true ? "bg-success" : "bg-danger")">
                            @(
                                item.Subscription == true ? "Active" :
                                item.Subscription == false ? "Inactive" :
                                "Unknown"
                                    )
                            </span>
                        </td> *@
                        <td>@item.Status</td>
                        <td>@item.UpdatedAt</td>
                        <td>@item.ProgressPercentage</td>
                    </tr>
                }
            </tbody>
        </table>

    </div>
</div>



@* <!-- Edit Details Start-->

<Modal @ref="updatemodal" Title="User Detail" UseStaticBackdrop="true" CloseOnEscape="false" Size="ModalSize.Large">
    <BodyTemplate>
        <div class="d-flex justify-content-center mt-3">
            <div class="text-center">
                <img src="ProfileImages/@details.ProfilePictureUrl" class="rounded-circle shadow mb-3" alt="@details.UserName" width="150" height="150">
            </div>
        </div>
        <EditForm Model="@details" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="container mb-4 p-3">
                <div class="row g-4 ">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label>UserName</label>
                            <InputText class="form-control" readonly @bind-value="details.UserName" />
                        </div>

                        <div class="col-md-6">
                            <label>Email</label>
                            <InputText class="form-control" readonly @bind-value="details.Email" />
                        </div>

                        <div  class="col-md-6">
                            <label>Role</label>
                            <InputSelect @bind-Value="details.Role" class="form-control">
                                <option value="Admin">Admin</option>
                                <option value="User">User</option>
                            </InputSelect>
                        </div>

                        <div class="col-md-6">
                            <label>Registered At</label>
                            <InputDate class="form-control" readonly @bind-value="details.CreatedAt" />
                        </div>

                        <div class="col-md-6">
                            @if (details.Role == "User")
                            {
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="isActiveSwitch" @bind="details.Subscription">
                                    <label class="form-check-label" for="isActiveSwitch">
                                        @(
                                            details.Subscription == true ? "Active" :
                                            details.Subscription == false ? "Inactive" :
                                            "Unknown"
                                            )
                                    </label>
                                </div>
                            }
                        </div>
                        
                        <hr class="mt-5"/>
                        <div class="col-12 mt-3 text-end">
                            <a @onclick="()=>OnHideUpdateClick(details.Id)" class="btn btn-secondary " style="width: 47px; height: 40px">
                                <i class="bi bi-x-lg fs-5"></i>
                            </a>
                            |
                            <Button type="ButtonType.Submit" class="btn btn-outline-success" style="width: 47px; height: 40px">
                                <i class="bi bi-floppy fs-5"></i>
                            </Button>
                        </div>
                    </div>
                </div>

            </div>

        </EditForm>

    </BodyTemplate>
</Modal>

<!-- Edit Details End -->

<!--Toaster Alert message-->
<Toasts class="p-3" Messages="messages" AutoHide="true" StackLength="3" Placement="ToastsPlacement.TopRight" /> *@




@code {
    List<ToastMessage> messages = new List<ToastMessage>();
    protected IEnumerable<Model.BooksLogs> Logs { get; set; }
    private int Count => Logs?.Count() ?? 0;
    private BooksLogs details;

    protected override void OnInitialized()
    {

        Logs = Db.BooksLogs.Include(u=>u.User).Include(u=> u.Book).ToList();

    }

   
    // <!-- Update Record Start-->
    // private Modal updatemodal = default!;

    // private async Task OnUpdateClick(int id)
    // {
    //     details = Db.BooksLogs.FirstOrDefault(c => c.Id == id);
    //     await updatemodal.ShowAsync();
    // }

    // private async Task OnHideUpdateClick(int id)
    // {
    //     await updatemodal.HideAsync();
    // }

    // private async Task HandleValidSubmit()
    // {
    //     Db.Users.Update(details);
    //     if (details.Role == "Admin" && details.Subscription == false)
    //     {
    //         details.Subscription = true; 
    //     }
    //     await Db.SaveChangesAsync();
    //     Users = Db.Users.OrderBy(c => c.Role).OrderBy(c => c.CreatedAt).ToList();
    //     await updatemodal.HideAsync();
    //     messages.Add(CreateUpdateMessage(ToastType.Success));
    // }
    // <!-- Update Record Start-->

    // <!-- Update Message Start-->
    // private ToastMessage CreateUpdateMessage(ToastType toastType)
    //    => new ToastMessage
    //        {
    //            Type = toastType,
    //            Title = "Message",
    //            HelpText = $"{DateTime.Now}",
    //            Message = $"Hello,The Record is Successfully Saved. DateTime: {DateTime.Now}",
    //        };
    // <!-- Update Message End-->
}