@page "/Admin/ContactUsDetails"
@layout AdminLayout
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]

<!-- Table -->

<div class="row  justify-content-center ">

    <div class="col-md-10 justify-content-center">
        <h2>
            Contact Messages (@Count)
        </h2>
        <table border="1" class="table mt-3 table-hover ">
            <thead class="custom-header">
                <tr >
                    <th scope="col">#</th>
                    <th scope="col">Name</th>
                    <th scope="col">Email</th>
                    <th scope="col">Subject</th>
                    <th scope="col">Message</th>
                    <th scope="col">ReceivedAt</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in contactUs)
                {
                    <tr style="cursor:pointer" @onclick="() => OnShowDetailClick(item.Id)">
                        <td>@item.Id</td>
                        <td>@item.Name</td>
                        <td>
                            <span class="short-text">@(item.Email.Length > 10 ? item.Email.Substring(0, 10) + "..." : item.Email)</span>
                        </td>
                        <td>
                            <span class="short-text">@(item.Subject.Length > 10 ? item.Subject.Substring(0, 10) + "..." : item.Subject)</span>
                        </td>
                        <td>
                            <span class="short-text">@(item.Message.Length > 20 ? item.Message.Substring(0, 20) + "..." : item.Message)</span>
                        </td>
                        <td>@item.CreatedAt</td>
                    </tr>
                }
            </tbody>
        </table>

    </div>
</div>


<!-- View Message -->

<Modal @ref="viewmodal" Title="ContactUs Detail" UseStaticBackdrop="true" CloseOnEscape="false" Size="ModalSize.Large">
    <BodyTemplate>
        <dl class="row justify-content-center">
            <dt class="col-sm-2">ID: </dt>
            <dd class="col-sm-10"> @details.Id</dd>

            <dt class="col-sm-2">Name: </dt>
            <dd class="col-sm-10"> @details.Name</dd>

            <dt class="col-sm-2">Email: </dt>
            <dd class="col-sm-10"> @details.Email</dd>

            <dt class="col-sm-2">Subject: </dt>
            <dd class="col-sm-10"> @details.Subject</dd>

            <dt class="col-sm-2">Message: </dt>
            <dd class="col-sm-10"> @details.Message</dd>

            <dt class="col-sm-2">ReceivedAt: </dt>
            <dd class="col-sm-10"> @details.CreatedAt</dd>
        </dl>
    </BodyTemplate>
    <FooterTemplate>
        <a @onclick="OnHideDetailsClick" class="btn btn-secondary " style="width: 47px; height: 40px">
            <i class="bi bi-x-lg fs-5"></i>
        </a>
        |
        <a @onclick="()=>OnDeleteClick(details.Id)" class="btn btn-outline-danger" style="width: 47px; height: 40px">
            <i class="bi bi-trash3 fs-5"></i>
        </a>
    </FooterTemplate>
</Modal>




<!-- Delete Message -->

<Modal @ref="deletemodal" Title="Delete Record" UseStaticBackdrop="true" CloseOnEscape="false" Size="ModalSize.Regular">
    <BodyTemplate>
        <h6>
            Are you sure you want to delete this record?
        </h6>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnCancelDeleteClick">Cancel</Button>
        <Button Color="ButtonColor.Danger"  @onclick="()=>OnConfirmDeleteClick(details.Id)">Confirm</Button>
    </FooterTemplate>
</Modal>



<!--Toaster Alert message-->
<Toasts class="p-3" Messages="messages" AutoHide="true" StackLength="3" Placement="ToastsPlacement.TopRight" />




@code{
    List<ToastMessage> messages = new List<ToastMessage>();
    protected IEnumerable<Model.ContactUs> contactUs{ get; set; }
    private int Count => contactUs?.Count() ?? 0;
    private ContactUs details;

    protected override void OnInitialized()
    {

        contactUs = Db.ContactUs.OrderByDescending(c => c.CreatedAt).ToList();

    }

    <!-- View Record Modal-->

    private Modal viewmodal = default!;

    private async Task OnShowDetailClick(int id)
    {
        details = Db.ContactUs.FirstOrDefault(c => c.Id == id);
        await viewmodal.ShowAsync();
    }

    private async Task OnHideDetailsClick()
    {
        await viewmodal.HideAsync();
    }

    <!-- Delete Record Modal-->

    private Modal deletemodal = default!;

    private async Task OnDeleteClick(int id)
    {
        await viewmodal.HideAsync();
        details = Db.ContactUs.FirstOrDefault(c => c.Id == id);
        await deletemodal.ShowAsync();
    }

    private async Task OnCancelDeleteClick()
    {
        
        await deletemodal.HideAsync();
    }

    private async Task OnConfirmDeleteClick(int id)
    {
        var item = Db.ContactUs.FirstOrDefault(c => c.Id == id);
        if (item != null)
        {
            Db.ContactUs.Remove(item);
            await Db.SaveChangesAsync();
            contactUs = Db.ContactUs.OrderByDescending(c => c.CreatedAt).ToList();
            messages.Add(CreateToastMessage(ToastType.Danger));
        }
        
        await deletemodal.HideAsync();
    }


    <!-- Delete Message -->

    private ToastMessage CreateToastMessage(ToastType toastType)
       => new ToastMessage
       {
           Type = toastType,
           Title = "Message",
           HelpText = $"{DateTime.Now}",
           Message = $"Hello,The Record is Successfully Deleted. DateTime: {DateTime.Now}",
       };
}
