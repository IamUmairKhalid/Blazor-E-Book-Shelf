@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject UserStateService UserState
@implements IDisposable
@inject AuthenticationStateProvider Auth
@rendermode InteractiveServer
<!-- Topbar -->
<div class="topbar-row border-3 shadow-sm p-0 ps-3 navbar navbar-dark" style=" background-color: rgba(0, 0, 0, 0.4);">
    <div class="container-fluid">
        <a class="navbar-brand" href="">E-Book Shelf <img src="E_Book_Site.png" alt="Logo" style="height: 7vw; max-height: 30px; width: auto; object-fit: contain; margin-top: -5px;" /></a>
    </div>
</div>

<!-- Side Navbar -->
<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <div class="d-flex justify-content-center mt-3">
        <div class="text-center" style="cursor:pointer" @onclick="() => OpenProfile(UserState.UserId)">
            <img src="@UserState.ProfileImageUrl" class="rounded-circle shadow mb-3" width="120" height="120" />
            <h4>@UserState.UserName</h4>
        </div>
    </div>
    <hr class="custom-hr" />
    <nav class="nav flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/Admin" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Dashboard
            </NavLink>
        </div>
          <hr class="custom-hr" />

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/Admin/usersdetails">
                <span class="bi bi-user-nav-menu" aria-hidden="true"></span> Users
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/Admin/booksdetails">
                <span class="bi bi-book-nav-menu" aria-hidden="true"></span> Books
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/Admin/BooksLogs">
                <span class="bi bi-booklogs-nav-menu" aria-hidden="true"></span> BooksLogs
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/Admin/AboutUsDetails">
                <span class="bi bi-about-nav-menu" aria-hidden="true"></span> AboutUs
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/Admin/ContactUsDetails">
                <span class="bi bi-contact-nav-menu" aria-hidden="true"></span> Contacts
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/Admin/Testimonials">
                <span class="bi bi-testi-nav-menu" aria-hidden="true"></span> Testimonials
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/Admin/social">
                <span class="bi bi-social-nav-menu" aria-hidden="true"></span> Social
            </NavLink>
        </div>
    </nav>
</div>

@code {
    int userId;
   
    protected override async Task OnInitializedAsync()
    {
        var user = (await Auth.GetAuthenticationStateAsync()).User;
        userId = int.Parse(user.FindFirst(ClaimTypes.NameIdentifier)!.Value);
        // Only load once, on first time
        if (string.IsNullOrEmpty(UserState.ProfileImageUrl) || UserState.UserName == "Unknown")
        {
            var validuser = Db.Users.FirstOrDefault(u => u.Id == userId); // Replace with actual logged-in Id
            if (validuser is not null)
            {
                UserState.SetUser(validuser.Id, validuser.UserName, $"/ProfileImages/{validuser.ProfilePictureUrl}");
            }
        }

        UserState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        UserState.OnChange -= StateHasChanged;
    }

    private void OpenProfile(int Id)
    {
        NavigationManager.NavigateTo($"/Admin/adminprofile/{Id}");
    }
}