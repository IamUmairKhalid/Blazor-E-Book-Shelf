@page "/history"
@layout UserLayout
@inject AuthenticationStateProvider Auth
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@attribute [Authorize]

<div class="row  justify-content-center ">

    <div class="col-md-10 justify-content-center">
        <h3 class="mt-4 mb-3">📖 Reading History (Last 7 Days)</h3>
        
        @if (History == null)
        {
            <p>Loading history...</p>
        }
        else if (!History.Any())
        {
            <p>No books read in the last 7 days.</p>
        }
        else
        {
            
            <ul class="list-group">
                @foreach (var item in History)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <strong>@item.Book.Title</strong><br />
                            <small>Last Seen: Page @item.LastSeenPage on @item.UpdatedAt?.ToString("MMM dd, yyyy")</small>
                            <span class="badge @(item.Status == "Reading" ? "bg-primary" : "bg-success")">
                                @(item.Status)
                            </span>
                        </div>
                        <a class="btn btn-outline-primary btn-sm" href="/readbook/@item.BookId">Continue</a>
                    </li>
                }
            </ul>
                
        }
    </div>
</div>

@code {
    private List<BooksLogs>? History;

    protected override async Task OnInitializedAsync()
    {
        var user = (await Auth.GetAuthenticationStateAsync()).User;
        var userId = int.Parse(user.FindFirst(ClaimTypes.NameIdentifier)!.Value);

        History = await Db.BooksLogs
       .Where(log => log.UserId == userId && log.UpdatedAt >= DateTime.Now.AddDays(-7) && log.Status == "Reading" || log.Status == "Completed")
       .Include(log => log.Book)
       .OrderByDescending(log => log.UpdatedAt)
       .ToListAsync();
    }
}
