@page "/completed"
@layout UserLayout
@rendermode InteractiveServer
@inject AuthenticationStateProvider Auth
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@attribute [Authorize]

<div class="container mt-5 mb-5">
    <h2 class="text-center mb-5" style="color: #000;"><b>Completed Books!!!</b></h2>
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @if (FavoriteBooks == null)
        {
            <p>Loading favorites...</p>
        }
        else if (!FavoriteBooks.Any())
        {
            <p>No favorite books yet.</p>
        }
        else
        {

            @foreach (var item in FavoriteBooks)
            {

                <div class="col">
                    <div class="card card-hover h-100 shadow-sm d-flex flex-column"
                         style="cursor:pointer"
                         @onclick="() => OpenBook(item.BookId)">

                        <!-- Slightly smaller image container -->
                        <div class="overflow-hidden" style="height:320px;">
                            <img src="@item.Book.CoverUrl"
                                 alt="Book cover"
                                 class="w-100 h-100"
                                 style="object-fit: cover;">
                        </div>

                        <!-- Book title and author -->
                        <div class="card-body text-center mt-auto">
                            <h5 class="card-title mb-1">@item.Book.Title</h5>
                            <p class="card-text text-muted mb-0">@item.Book.Author</p>
                        </div>
                    </div>
                </div>
            }


        }
    </div>
</div>
@code {
    private List<BooksLogs>? FavoriteBooks;

    protected override async Task OnInitializedAsync()
    {
        var user = (await Auth.GetAuthenticationStateAsync()).User;
        var userId = int.Parse(user.FindFirst(ClaimTypes.NameIdentifier)!.Value);

        FavoriteBooks = await Db.BooksLogs
            .Include(log => log.Book)
            .Where(log => log.UserId == userId && log.Status == "Completed")
            .ToListAsync();
    }

    private void OpenBook(int id)
    {
        NavigationManager.NavigateTo($"/userbookdetail/{id}", true);
    }

}
