@page "/readbook/{BookId:int?}"
@layout UserLayout
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@inject AuthenticationStateProvider Auth
@attribute [Authorize]

<PageTitle>Read Book</PageTitle>

<div class="row  justify-content-center ">
    <div class="col-md-10 justify-content-center">

        @if (loadError)
        {
            <div class="alert alert-danger mt-3">
                <strong>Error:</strong> Failed to load the PDF. Please check the Dropbox link or try again later.
            </div>
        }
        else if (!string.IsNullOrEmpty(pdfBase64String))
        {
            <div class="container-fluid px-4 mt-3">
        
                <!-- Sticky Top Toolbar -->
                <div class="sticky-top bg-white shadow-sm py-2 px-3 z-3 mb-3" style="top: 65px;">
                    <div class="d-flex justify-content-between align-items-center">
                        <strong>Reading Status</strong>
                        <button class="btn btn-sm btn-outline-secondary" @onclick="() => toolbarVisible = !toolbarVisible">
                            <i class="fas @(toolbarVisible ? "fa-chevron-up" : "fa-chevron-down")"></i>
                        </button>
                    </div>
        
                    @if (toolbarVisible)
                    {
                        <div class="row mt-2 ">

                            <div class="col-md-2">
                                <label class="form-label">Last Saved Page</label>
                                <div class="form-control bg-light">@Log.LastSeenPage</div>
                            </div>

                            <div class="col-md-2">
                                <label class="form-label">Status</label>
                                <select class="form-select" @bind="Log.Status">
                                    <option value="Reading">Reading</option>
                                    <option value="Completed">Completed</option>
                                </select>
                            </div>
        
                            <div class="col-md-1">
                                <label class="form-label">Rating</label>
                                <InputNumber @bind-Value="Log.Rating" min="0" max="5" step="0.5" class="form-control" />
                            </div>
                            
                            <div class="col-md-4">
                                <label class="form-label">Progress</label>
                                <div class="progress">
                                    <div class="progress-bar" role="progressbar" style="width: @($"{Log.ProgressPercentage}%")">
                                        @($"{Log.ProgressPercentage:F1}%")
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-2 mt-4">
                                <div class="form-check">
                                    <label class="form-check-label">Favorite</label>
                                    <InputCheckbox @bind-Value="Log.Favorite" class="form-check-input" />
                                </div>
                            </div>
        
                            <div class="col-md-1 mt-3">
                                <button class="btn btn-sm btn-success " @onclick="SaveLog">
                                    <i class="bi bi-floppy fs-5"></i>
                                </button>
                            </div>
                        </div>
                    }
                </div>
        
                <!-- PDF Viewer -->
                <PdfViewer Class="w-100 mb-5"
                           Url="@($"data:application/pdf;base64,{pdfBase64String}")"
                           OnPageChanged="OnPageChanged"
                           OnDocumentLoaded="OnDocumentLoaded" />
            </div>
        }
        else
        {
            <div class="mt-3">
                <p class="text-muted">@eventLog</p>
            </div>
        }
    </div>
</div>

<!--Toaster Alert message Start-->

<Toasts class="p-3" Messages="messages" AutoHide="true" StackLength="3" Placement="ToastsPlacement.TopRight" />

<!--Toaster Alert message End-->
@code {
    [Parameter] public int BookId { get; set; }
    List<ToastMessage> messages = new List<ToastMessage>();
    private int userId;
    private string pdfBase64String = "";
    private bool loadError = false;
    private string eventLog = $"Loading PDF...";
    private int CurrentPage = 1;
    private int TotalPages = 1;
    private bool toolbarVisible = true;
    private double progress;
    private Users Users { get; set; }
    private Book? book;
    private BooksLogs Log = new();

    protected override async Task OnInitializedAsync()
    {
        var user = (await Auth.GetAuthenticationStateAsync()).User;
        userId = int.Parse(user.FindFirst(ClaimTypes.NameIdentifier)!.Value);
        Users = await Db.Users.FindAsync(userId);
        book = await Db.Books.FindAsync(BookId);

        Log = await Db.BooksLogs
           .FirstOrDefaultAsync(b => b.BookId == BookId && b.UserId == userId)
           ?? new BooksLogs
           {
               BookId = BookId,
               UserId = Users.Id,
               ISBN = book?.ISBN ?? "",
               Status = "Reading",
               Favorite = false,
               LastSeenPage = 0,
               ProgressPercentage = 0
           };

        Log.Status = "Reading";
        try
        {
            var dropboxUrl = book.Link;
            using var httpClient = new HttpClient();
            var response = await httpClient.GetAsync(dropboxUrl);

            if (response.IsSuccessStatusCode)
            {
                var pdfBytes = await response.Content.ReadAsByteArrayAsync();
                pdfBase64String = Convert.ToBase64String(pdfBytes);
            }
            else loadError = true;
        }
        catch
        {
            loadError = true;
        }

    }

    private async void OnPageChanged(PdfViewerEventArgs args)
    {
        CurrentPage = args.CurrentPage;
        TotalPages = args.TotalPages;   
        progress = Math.Round((double)CurrentPage / args.TotalPages * 100, 1);
    }

    private void OnDocumentLoaded(PdfViewerEventArgs args)
    {
        CurrentPage = args.CurrentPage;
        TotalPages = args.TotalPages;
        progress = Math.Round((double)CurrentPage / args.TotalPages * 100, 1);
    }

    private async Task SaveLog()
    {
        var log = await Db.BooksLogs.FirstOrDefaultAsync(l => l.BookId == BookId && l.UserId == Users.Id);

        if (log != null)
        {
            log.LastSeenPage = CurrentPage;
            log.ProgressPercentage = progress;
            log.Status = Log.Status;
            log.Rating = Log.Rating;
            log.Favorite = Log.Favorite;
            log.UpdatedAt = DateTime.Now;

            Db.BooksLogs.Update(log);
            await Db.SaveChangesAsync();
            // Update book's average rating
            await UpdateBookRating(BookId);

            messages.Add(CreateUpdateMessage(ToastType.Success));
        }

    }

    private async Task UpdateBookRating(int bookId)
    {
        var ratings = await Db.BooksLogs
            .Where(log => log.BookId == bookId && log.Rating > 0)
            .Select(log => log.Rating)
            .ToListAsync();

        if (ratings.Any())
        {
            double avgRating = Math.Round((double)ratings.Average(), 1);
            int ratingCount = ratings.Count();
            var book = await Db.Books.FindAsync(bookId);
            if (book != null)
            {
                book.Rating = avgRating;
                book.RatingCount = ratingCount;
                Db.Books.Update(book);
                await Db.SaveChangesAsync();
            }
        }
    }


    <!-- Update Message Start-->
    private ToastMessage CreateUpdateMessage(ToastType toastType)
       => new ToastMessage
       {
           Type = toastType,
           Title = "Message",
           HelpText = $"{DateTime.Now}",
           Message = $"Hello,The Record is Successfully Saved. DateTime: {DateTime.Now}",
       };
    <!-- Update Message End-->

}
