@page "/collection"
@layout UserLayout
@rendermode InteractiveServer
@inject AuthenticationStateProvider Auth
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@attribute [Authorize]

<h3 class="mt-4 mb-3">📚 My Book Collection</h3>

@if (SavedBooks == null)
{
    <p>Loading saved books...</p>
}
else if (!SavedBooks.Any())
{
    <p>You haven’t saved any books yet.</p>
}
else
{
    <div class="container mt-5 mb-5">
        <h2 class="text-center mb-4" style="color: #000;"><b>New Books!!!</b></h2>
        <div class="row row-cols-1 row-cols-md-3 g-4">
            @foreach (var item in SavedBooks)
            {

                <div class="col">
                    <div class="card card-hover h-100 shadow-sm d-flex flex-column"
                         style="cursor:pointer"
                         @onclick="() => OpenBook(item.BookId)">

                        <!-- Slightly smaller image container -->
                        <div class="overflow-hidden" style="height:320px;">
                            <img src="@item.Book.CoverUrl"
                                 alt="Book cover"
                                 class="w-100 h-100"
                                 style="object-fit: cover;">
                        </div>

                        <!-- Book title and author -->
                        <div class="card-body text-center mt-auto">
                            <h5 class="card-title mb-1">@item.Book.Title</h5>
                            <p class="card-text text-muted mb-0">@item.Book.Author</p>
                            <div class="text-yellow-500" style="color: gold;">
                                @for (int i = 0; i < (int)item.Book.Rating; i++)
                                {
                                    <i class="fas fa-star"></i>
                                }

                                @if (item.Book.Rating - (int)item.Book.Rating >= 0.25 && item.Book.Rating - (int)item.Book.Rating < 0.75)
                                {
                                    <i class="fas fa-star-half-alt"></i>
                                }

                                @for (int i = 0; i < (5 - (int)item.Book.Rating - ((item.Book.Rating - (int)item.Book.Rating >= 0.25 && item.Book.Rating - (int)item.Book.Rating < 0.75) ? 1 : 0)); i++)
                                {
                                    <i class="far fa-star"></i>
                                }
                                (@item.Book.RatingCount)
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private List<BooksLogs>? SavedBooks;

    protected override async Task OnInitializedAsync()
    {
        var user = (await Auth.GetAuthenticationStateAsync()).User;
        var userId = int.Parse(user.FindFirst(ClaimTypes.NameIdentifier)!.Value);

        SavedBooks = await Db.BooksLogs
            .Where(log => log.UserId == userId)
            .Include(log => log.Book)
            .ToListAsync();
    }

    private void OpenBook(int id)
    {
        NavigationManager.NavigateTo($"/userbookdetail/{id}", true);
    }
}
