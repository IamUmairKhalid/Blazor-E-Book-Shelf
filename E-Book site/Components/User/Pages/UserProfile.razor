<<<<<<< Updated upstream:E-Book site/Components/User/UserProfile.razor
﻿@page "/userprofile"
@layout UserLayout
=======
﻿@layout UserLayout
@page "/userprofile"
@inject UserStateService UserState
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider Auth
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
>>>>>>> Stashed changes:E-Book site/Components/User/Pages/UserProfile.razor

<PageTitle>User Profile</PageTitle>

<<<<<<< Updated upstream:E-Book site/Components/User/UserProfile.razor
<div class="container card mt-2 mb-2">
=======
<PageTitle>User Profile</PageTitle>
<!--Profile-->
<div class="container card mt-2 mb-4">
>>>>>>> Stashed changes:E-Book site/Components/User/Pages/UserProfile.razor
    <div class="row justify-content-center mt-5 mb-5">

        <div class="col-md-6">
            <h1>Profile</h1>
            <EditForm Model="@userProfile" OnValidSubmit="HandleValidSubmit" class="row g-3">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="col-md-6 ">
                    <label class="form-label">Name</label>
                    <InputText class="form-control" @bind-Value="userProfile.Name" />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Email</label>
<<<<<<< Updated upstream:E-Book site/Components/User/UserProfile.razor
                    <InputText class="form-control" @bind-Value="userProfile.Email" />
=======
                    <InputText class="form-control" readonly @bind-Value="Users.Email" />
>>>>>>> Stashed changes:E-Book site/Components/User/Pages/UserProfile.razor
                </div>
                <div class="col-md-6">
                    <label class="form-label">Birthday</label>
                    <InputDate class="form-control" @bind-Value="userProfile.Birthday" />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Age</label>
                    <InputNumber class="form-control" @bind-Value="userProfile.Age" />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Image Name</label>
                    <InputText class="form-control" @bind-Value="userProfile.Image" readonly />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Photo</label>
                    <InputFile OnChange="HandlePhotoUpload" class="form-control" />
                </div>
                <div class="col-md-12">
                    <label class="form-label">Address</label>
                    <InputText class="form-control" @bind-Value="userProfile.Address" />
                </div>
                <div class="col-md-12">
                    <label class="form-label">Description One</label>
                    <InputTextArea class="form-control" @bind-Value="userProfile.DesOne" />
                </div>
                <div class="col-md-12">
                    <button type="submit" class="btn btn-primary mt-3">SAVE</button>
                </div>
            </EditForm>
        </div>

        <div class="col-md-4 text-center mt-2">
            <img src="StaticImages/Carousel_img_1.jpg" alt="Profile Image" class="mt-5 rounded-circle" style="height: 350px; width: 350px; object-fit: cover;" />
        </div>
    </div>
</div>

@code {
<<<<<<< Updated upstream:E-Book site/Components/User/UserProfile.razor
    private UserProfileModel userProfile = new();

    private async Task HandlePhotoUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        userProfile.Image = file.Name;

        // Optionally save to wwwroot/images here
        var path = Path.Combine("wwwroot/images", file.Name);
        using var fs = new FileStream(path, FileMode.Create);
        await file.OpenReadStream().CopyToAsync(fs);
=======
    public int Id { get; set; }
    List<ToastMessage> messages = new List<ToastMessage>();
    private Users Users { get; set; }
    private IBrowserFile? uploadedFile;

    protected override async Task OnInitializedAsync()
    {
        var user = (await Auth.GetAuthenticationStateAsync()).User;
        Id = int.Parse(user.FindFirst(ClaimTypes.NameIdentifier)!.Value);
        Users = Db.Users.Where(c => c.Id == Id).FirstOrDefault();

>>>>>>> Stashed changes:E-Book site/Components/User/Pages/UserProfile.razor
    }

    private void HandleValidSubmit()
    {
        Console.WriteLine("Profile saved successfully.");
    }

    public class UserProfileModel
    {
<<<<<<< Updated upstream:E-Book site/Components/User/UserProfile.razor
        public string Name { get; set; }
        public string Email { get; set; }
        public string Phone { get; set; }
        public string Degree { get; set; }
        public DateTime Birthday { get; set; }
        public int Age { get; set; }
        public string FreelanceStatus { get; set; }
        public string Image { get; set; }
        public string Address { get; set; }
        public string DesOne { get; set; }
        public string DesTwo { get; set; }
=======
        if (uploadedFile != null)
        {

            var fileName = uploadedFile.Name;
            string imageName = $"{Users.Id}_{Users.UserName}_{fileName}";


            string old_image = Users.ProfilePictureUrl;
            DeletePicture(old_image);

            var FolderPath = Path.Combine(env.WebRootPath, "ProfileImages");
            var ImagePath = Path.Combine(FolderPath, imageName);


            await using var myFileStream = new FileStream(ImagePath, FileMode.Create);
            await uploadedFile.OpenReadStream(5 * 1024 * 1024).CopyToAsync(myFileStream); // 5 MB limit
            myFileStream.Close();

            Users.ProfilePictureUrl = imageName;
        }

        Db.Users.Update(Users);
        await Db.SaveChangesAsync();
        messages.Add(CreateUpdateMessage(ToastType.Success));
        uploadedFile = null;
        UserState.SetUser(Users.Id, Users.UserName, $"/ProfileImages/{Users.ProfilePictureUrl}");

>>>>>>> Stashed changes:E-Book site/Components/User/Pages/UserProfile.razor
    }
}
