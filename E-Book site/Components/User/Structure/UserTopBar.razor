@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@inject AuthenticationStateProvider Auth
@rendermode InteractiveServer
<!--Modal Start-->

<Modal @ref="signoutModal" Title="Confirm SignOut" UseStaticBackdrop="true" CloseOnEscape="false" IsCentered="true">
    <BodyTemplate>
        Are you sure you want to SignOut?
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="HideLogoutModal">Cancel</Button>
        <Button Color="ButtonColor.Danger" @onclick="ConfirmLogout">Signout</Button>
    </FooterTemplate>
</Modal>
<!--Modal Ends-->

<!-- Topbar Start -->
<nav class="navbar navbar-expand-lg sticky-top border-3 shadow-sm p-0" style="background-color:#FAF9F6;">
    <!-- Brand -->
    <a href="/" class="navbar-brand d-flex align-items-center px-4 py-2" style="font-family: 'Merriweather', serif;">
        <h1 class="m-0 fw-bold" style="color:#1B263B;">E-Book Shelf
            <img src="E_Book_Site.png" alt="Logo" style="height: 7vw; max-height: 45px; width: auto; object-fit: contain; margin-top: -6px;" />
        </h1>
    </a>

    <!-- Toggler -->
    <button class="navbar-toggler me-3" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse" aria-controls="navbarCollapse" aria-expanded="false" aria-label="Toggle navigation" style="border-color:#1B263B;">
        <span class="navbar-toggler-icon" style="filter: invert(30%) sepia(20%) saturate(400%) hue-rotate(190deg) brightness(80%) contrast(85%);"></span>
    </button>

    <!-- Nav Links -->
    <div class="collapse navbar-collapse" id="navbarCollapse">
        <ul class="navbar-nav ms-auto px-4 py-2 py-lg-0" style="font-family: 'Open Sans', sans-serif; font-weight: 600; color: #555555;">
            <li class="nav-item">
                <a class="nav-link btn active hover-in" href="userdashboard">Dashboard</a>
            </li>
        </ul>

        <!-- CTA Button -->
        <div class="d-lg-block pe-3 ">
            <button class="hover-in btn py-2 px-4 text-light" style="background-color:#FF6F3C; font-weight:700; font-family: 'Open Sans', sans-serif;" @onclick="ShowLogoutModal">
                Sign Out
            </button>
        </div>
    </div>
</nav>

<!-- Topbar End -->
<!--Testimonial Modal-->
@if (showModal)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.6);">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content shadow-lg">
                <div class="modal-header">
                    <h5 class="modal-title">Share Your Experience</h5>
                    <button type="button" class="btn-close" @onclick="DismissModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="testimonial" OnValidSubmit="HandleReviewSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label>Content</label>
                            <InputTextArea class="form-control" rows="4" @bind-Value="testimonial.Content" />
                        </div>

                        <div class="star-rating" style="font-size: 1.5rem; cursor: pointer;">
                            @for (int i = 1; i <= 5; i++)
                            {
                                double fullThreshold = i;
                                double halfThreshold = i - 0.5;

                                <span class="star-wrapper" style="position: relative; display: inline-block; width: 24px;">
                                    <span @onclick="@(() => SetRating(halfThreshold))"
                                          style="position: absolute; width: 12px; height: 100%; left: 0;"></span>
                                    <span @onclick="@(() => SetRating(fullThreshold))"
                                          style="position: absolute; width: 12px; height: 100%; right: 0;"></span>

                                    <i class="@GetStarClass(i)"></i>
                                </span>
                            }
                        </div>



                        <button class="btn btn-success mt-3 " type="submit">Submit Review</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!--Toaster Success Testimonial Modal-->
<Toasts Messages="toastMessages" AutoHide="true" Placement="ToastsPlacement.TopRight" />


@code {
    private int Id;
    private Users Users { get; set; }
    private Testimonial testimonial = new();
    private bool showModal = false;
    private double hoverRating = 0.0;
    private bool modalDismissed = false;

    private List<ToastMessage> toastMessages = new();

    private Modal signoutModal = default!;


    private async Task ShowLogoutModal()
    {
        var user = (await Auth.GetAuthenticationStateAsync()).User;
        Id = int.Parse(user.FindFirst(ClaimTypes.NameIdentifier)!.Value);
        Users = Db.Users.FirstOrDefault(c => c.Id == Id)!;

        var alreadyReviewed = await Db.Testimonials.AnyAsync(t => t.UserId == Users.Id);
        if (!alreadyReviewed)
        {
            testimonial.UserId = Users.Id;
            showModal = true;
        }
        else
        {
            await signoutModal.ShowAsync();
        }
    }

    private async Task HideLogoutModal()
    {
        await signoutModal.HideAsync();
    }

    private async Task ConfirmLogout()
    {
        await signoutModal.HideAsync();
        NavigationManager.NavigateTo("/signout", forceLoad: true);
    }



    private async Task HandleReviewSubmit()
    {
        testimonial.CreatedAt = DateTime.Now;
        testimonial.IsApproved = false;

        Db.Testimonials.Add(testimonial);
        await Db.SaveChangesAsync();

        showModal = false;

        toastMessages.Add(new ToastMessage
        {
            Title = "Thank You!",
            Message = "Your review has been submitted.",
            Type = ToastType.Success,
            HelpText = DateTime.Now.ToString()
        });

        await signoutModal.ShowAsync();
    }

    private void SetRating(double value)
    {
        testimonial.Rating = testimonial.Rating == value ? 0 : value;
    }


    private void HoverStar(int starIndex, MouseEventArgs e)
    {
        hoverRating = starIndex - (e.OffsetX < 12 ? 0.5 : 0.0);
    }

    private void ResetHover()
    {
        hoverRating = 0;
    }

    private string GetStarClass(int starIndex)
    {
        double rating = hoverRating > 0 ? hoverRating : testimonial.Rating;

        if (rating >= starIndex)
            return "fas fa-star text-warning";
        else if (rating >= starIndex - 0.5)
            return "fas fa-star-half-alt text-warning";
        else
            return "far fa-star text-muted";
    }

    private async Task DismissModal()
    {
        await signoutModal.ShowAsync();
        showModal = false;
        modalDismissed = true;
    }

}
